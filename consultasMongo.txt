.Utilizando Mongo Shell, crear una base de datos llamada ecommerce que contenga dos colecciones: mensajes y productos

use ecommerce
switched to db ecommerce
db.createCollection("mensajes")
{ "ok" : 1 }
db.createCollection("productos")
{ "ok" : 1 }

1-Agregar 10 documentos con valores distintos a las colecciones mensajes y productos. El formato de los documentos debe estar en correspondencia con el que venimos utilizando en el entregable con base de datos MariaDB. 
2 -Definir las claves de los documentos en relación a los campos de las tablas de esa base. En el caso de los productos, poner valores al campo precio entre los 100 y 5000 pesos(eligiendo valores intermedios, ej: 120, 580, 900, 1280, 1700, 2300, 2860, 3350, 4320, 4990).
PRODUCTOS:
 db.productos.insertMany([{"name": "Remera","description": "S","code": 24672,"thumbnail": "http://njsnk.com","pricdb.productos.insertMany([{"name": "Remera","description": "S","code": 24672,"thumbnail": "http://njsnk.com","price": 150,"stock": 20},{"name": "Pantalon","description": "M","code": 24767,"thumbnail": "http:..xllx","price":250}])
 {
	"acknowledged" : true,
	"insertedIds" : [
		ObjectId("62b3d07eb378b73fa7109d32"),
		ObjectId("62b3d07eb378b73fa7109d33"),
		ObjectId("62b3d07eb378b73fa7109d34"),
		ObjectId("62b3d07eb378b73fa7109d35"),
		ObjectId("62b3d07eb378b73fa7109d36")
	]
}

MENSAJES:
db.mensajes.insertMany([{"mail":"shaoso@gmail.com","date":"12:00:01","text":"hola"},{"mail":"shaoso@gmail.com","date":"12:04:01","text":"que tal"},{"mail":"shaoso@gmail.com","date":"12:00:01","text":"hola"},{"mail":"shaoso@gmail.com","date":"12:00:01","text":"hola"},{"mail":"shaoso@gmail.com","date":"12:00:01","text":"hola"}])
{
	"acknowledged" : true,
	"insertedIds" : [
		ObjectId("62b3d2a8b378b73fa7109d37"),
		ObjectId("62b3d2a8b378b73fa7109d38"),
		ObjectId("62b3d2a8b378b73fa7109d39"),
		ObjectId("62b3d2a8b378b73fa7109d3a"),
		ObjectId("62b3d2a8b378b73fa7109d3b")
	]
}

3 - Listar todos los documentos en cada colección
MENSAJES:
 db.mensajes.find().pretty()
{
	"_id" : ObjectId("62b3d2a8b378b73fa7109d37"),
	"mail" : "shaoso@gmail.com",
	"date" : "12:00:01",
	"text" : "hola"
}
{
	"_id" : ObjectId("62b3d2a8b378b73fa7109d38"),
	"mail" : "shaoso@gmail.com",
	"date" : "12:04:01",
	"text" : "que tal"
}
{
	"_id" : ObjectId("62b3d2a8b378b73fa7109d39"),
	"mail" : "shaoso@gmail.com",
	"date" : "12:00:01",
	"text" : "hola"
}
{
	"_id" : ObjectId("62b3d2a8b378b73fa7109d3a"),
	"mail" : "shaoso@gmail.com",
	"date" : "12:00:01",
	"text" : "hola"
}
{
	"_id" : ObjectId("62b3d2a8b378b73fa7109d3b"),
	"mail" : "shaoso@gmail.com",
	"date" : "12:00:01",
	"text" : "hola"
}

PRODUCTOS:
db.productos.find().pretty()
{
	"_id" : ObjectId("62b3d07eb378b73fa7109d32"),
	"name" : "Remera",
	"description" : "S",
	"code" : 24672,
	"thumbnail" : "http://njsnk.com",
	"price" : 150,
	"stock" : 20
}
{
	"_id" : ObjectId("62b3d07eb378b73fa7109d33"),
	"name" : "Pantalon",
	"description" : "M",
	"code" : 24767,
	"thumbnail" : "http:..xllx",
	"price" : 250,
	"stock" : 20
}
{
	"_id" : ObjectId("62b3d07eb378b73fa7109d34"),
	"name" : "Campera",
	"description" : "L",
	"code" : 24767,
	"thumbnail" : "http:..xllx",
	"price" : 500,
	"stock" : 20
}
{
	"_id" : ObjectId("62b3d07eb378b73fa7109d35"),
	"name" : "Zapatilla",
	"description" : "41",
	"code" : 9537,
	"thumbnail" : "http:s.c.sñ.j",
	"price" : 1200,
	"stock" : 23
}
{
	"_id" : ObjectId("62b3d07eb378b73fa7109d36"),
	"name" : "Zapatilla",
	"description" : "41",
	"code" : 9537,
	"thumbnail" : "http:s.c.sñ.j",
	"price" : 1200,
	"stock" : 23
}

4 - Mostrar la cantidad de documentos almacenados en cada una de ellas.
> db.mensajes.find().count()
5
> db.productos.find().count()
5

5 - Realizar un CRUD sobre la colección de productos:
a) Agregar un producto más en la colección de productos.

db.productos.insertOne({"name": "Pantalon","description": "30","code": 08567,"thumbnail": "http//sjjs.com","price": 250,"stock": 23})
{
	"acknowledged" : true,
	"insertedId" : ObjectId("62b3d40bb378b73fa7109d3c")
}

b) Realizar una consulta por nombre de producto específico:
db.productos.findOne({"name": "Remera"})
{
	"_id" : ObjectId("62b3d07eb378b73fa7109d32"),
	"name" : "Remera",
	"description" : "S",
	"code" : 24672,
	"thumbnail" : "http://njsnk.com",
	"price" : 150,
	"stock" : 20
}

i) Listar los productos con precio menor a 1000 pesos.
db.productos.find({"price": {$lt: 1000} } ).pretty()
{
	"_id" : ObjectId("62b3d07eb378b73fa7109d32"),
	"name" : "Remera",
	"description" : "S",
	"code" : 24672,
	"thumbnail" : "http://njsnk.com",
	"price" : 150,
	"stock" : 20
}
{
	"_id" : ObjectId("62b3d07eb378b73fa7109d33"),
	"name" : "Pantalon",
	"description" : "M",
	"code" : 24767,
	"thumbnail" : "http:..xllx",
	"price" : 250,
	"stock" : 20
}
{
	"_id" : ObjectId("62b3d07eb378b73fa7109d34"),
	"name" : "Campera",
	"description" : "L",
	"code" : 24767,
	"thumbnail" : "http:..xllx",
	"price" : 500,
	"stock" : 20
}
{
	"_id" : ObjectId("62b3d40bb378b73fa7109d3c"),
	"name" : "Pantalon",
	"description" : "30",
	"code" : 8567,
	"thumbnail" : "http//sjjs.com",
	"price" : 250,
	"stock" : 23
}

ii) Listar los productos con precio entre los 1000 a 3000 pesos.

> db.productos.find( { $and: [ {"price": {$gte: 1000 } } , {"price":  { $lte: 3000}  } ] } ).pretty()
{
	"_id" : ObjectId("62b3d07eb378b73fa7109d35"),
	"name" : "Zapatilla",
	"description" : "41",
	"code" : 9537,
	"thumbnail" : "http:s.c.sñ.j",
	"price" : 1200,
	"stock" : 23
}
{
	"_id" : ObjectId("62b3d07eb378b73fa7109d36"),
	"name" : "Zapatilla",
	"description" : "41",
	"code" : 9537,
	"thumbnail" : "http:s.c.sñ.j",
	"price" : 1200,
	"stock" : 23
}

iii) Listar los productos con precio mayor a 3000 pesos
> db.productos.find({"price": {$gt: 3000  } } ).pretty()
> 

iv) Realizar una consulta que traiga solo el nombre del tercer producto más barato
> db.productos.find().sort({"price": 1 }).limit(1).skip(2).pretty()
{
	"_id" : ObjectId("62b3d07eb378b73fa7109d33"),
	"name" : "Pantalon",
	"description" : "M",
	"code" : 24767,
	"thumbnail" : "http:..xllx",
	"price" : 250,
	"stock" : 20
}

c) Hacer una actualización sobre todos los productos con precios mayores a 4000 pesos.
d) Cambiar el stock a cero de los productos con precios mayores a 4000 pesos

db.productos.updateMany({ price: { $gt: 4000 } },{ $set: { "stock" : 0 } })
{ "acknowledged" : true, "matchedCount" : 0, "modifiedCount" : 0 }

e) Borrar los productos con precio menor a 1000 pesos
> db.productos.deleteMany({ price: { $gt: 1000 } })
{ "acknowledged" : true, "deletedCount" : 2 }

6) Crear un usuario 'pepe' clave: 'asd456' que sólo pueda leer la base de datos ecommerce
Verificar que pepe no pueda cambiar información. CREAR UN USUARIO LECTOR

db.createUser( { user: "pepe", pwd: "asd456", roles: [ { role: "read", db:"ecommerce"} ]  } )
Successfully added user: {
	"user" : "pepe",
	"roles" : [
		{
			"role" : "read",
			"db" : "ecommerce"
		}
	]
}
